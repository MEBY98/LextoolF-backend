# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type DescriptorType {
  id: ID
  description: String
}

type ContornoDefinitionObjectType {
  definition: String
  typeOfDefinition: DescriptorType
  argumentalSchema: DescriptorType
  relationship: [DescriptorType!]
  contorno: String
  typeOfContorno: [DescriptorType!]
  positionOfContorno: [DescriptorType!]
  formatOfContorno: [DescriptorType!]
}

type ContornoDefinitionToEditType {
  definition: String
  typeOfDefinition: String
  argumentalSchema: String!
  relationship: [String!]
  contorno: String
  typeOfContorno: [String!]
  positionOfContorno: [String!]
  formatOfContorno: [String!]
}

type GeneralDescriptionObjectType {
  tipo: DescriptorType
  structure: DescriptorType
  conceptualDomain: DescriptorType
}

type GeneralDescriptionToEditType {
  tipo: String
  structure: String
  conceptualDomain: String
}

type OrderLemmaObjectType {
  order: [DescriptorType!]
  criteriaOfLematization: [DescriptorType!]
  formalStructure: [DescriptorType!]
  ubicationOfContorno: DescriptorType
  typeOfVariant: [DescriptorType!]
  formatOfVariant: [DescriptorType!]
  tipographyOfVariant: [DescriptorType!]
}

type OrderLemmaToEditType {
  order: [String!]
  criteriaOfLematization: [String!]
  formalStructure: [String!]
  ubicationOfContorno: String
  typeOfVariant: [String!]
  formatOfVariant: [String!]
  tipographyOfVariant: [String!]
}

type UseInformationObjectType {
  anotation: String
  position: DescriptorType
  format: DescriptorType
  tipography: DescriptorType
}

type UseInformationToEditType {
  anotation: String
  position: String
  format: String
  tipography: String
}

type ExampleObjectType {
  anotation: String
  typeOfExample: [DescriptorType!]
  formatOfExample: [DescriptorType!]
  functionOfExample: [DescriptorType!]
}

type ExampleToEditType {
  anotation: String
  typeOfExample: [String!]
  formatOfExample: [String!]
  functionOfExample: [String!]
}

type ParadigmaticInfoObjectType {
  typeOfRelationship: DescriptorType
  formOfPresentation: [DescriptorType!]
  position: [DescriptorType!]
}

type ParadigmaticInfoToEditType {
  typeOfRelationship: String
  formOfPresentation: [String!]
  position: [String!]
}

type Clasificationtype {
  id: ID!
  clasification: String!
}

type Ubicationtype {
  id: ID!
  ubication: String!
}

type ElementType {
  id: ID!
  element: String!
  clasification: Clasificationtype!
  ubication: Ubicationtype!
  generalDescription: GeneralDescriptionObjectType
  orderLemma: OrderLemmaObjectType
  useInformation: [UseInformationObjectType!]
  contornoDefinition: [ContornoDefinitionObjectType!]
  example: ExampleObjectType
  paradigmaticInfo: ParadigmaticInfoObjectType
}

type ElementDescriptorsAsStringType {
  id: ID!
  element: String!
  clasification: Clasificationtype!
  ubication: Ubicationtype!
  generalDescription: GeneralDescriptionToEditType
  orderLemma: OrderLemmaToEditType
  useInformation: [UseInformationToEditType!]
  contornoDefinition: [ContornoDefinitionToEditType!]
  example: ExampleToEditType
  paradigmaticInfo: ParadigmaticInfoToEditType
}

type ElementToEditType {
  id: ID!
  element: String!
  clasification: String!
  ubication: String!
  generalDescription: GeneralDescriptionToEditType
  orderLemma: OrderLemmaToEditType
  useInformation: [UseInformationToEditType!]
  contornoDefinition: [ContornoDefinitionToEditType!]
  example: ExampleToEditType
  paradigmaticInfo: ParadigmaticInfoToEditType
}

type EntryType {
  id: ID!
  letter: String!
  context: [String!]!
  elements: [ElementDescriptorsAsStringType!]
}

type EntryToEditType {
  id: ID!
  letter: String!
  context: [String!]!
  elements: [ElementToEditType!]
}

type Authortype {
  id: ID!
  name: String!
  siglas: String!
}

type AuthorToEditType {
  id: ID
  name: String!
  siglas: String!
}

type DictionaryInfotype {
  id: ID!
  name: String!
  siglas: String!
  author: [Authortype!]!
  annoOfPublication: Float!
  reference: String!
}

type DictionaryType {
  id: ID!
  dictionaryInfo: DictionaryInfotype!
  letters: [String!]!
  entries: [EntryType!]!
}

type DictionaryEntriesAsStringType {
  id: ID!
  dictionaryInfo: DictionaryInfotype!
  letters: [String!]!
  entries: [String!]!
}

type DictionaryToEditType {
  id: ID
  dictionaryInfo: String!
  letters: [String!]!
  entries: [String!]
}

type FraseograficStudyType {
  id: ID!
  name: String!
  initYear: Float!
  finalYear: Float!
  state: String!
  dictionaries: [DictionaryEntriesAsStringType!]
}

type FraseograficStudyToEditType {
  id: ID!
  name: String!
  initYear: Float!
  finalYear: Float!
  state: String!
  dictionaries: [DictionaryToEditType!]
}

type DescriptorTypeType {
  id: ID
  name: String!
  tab: String
  descriptors: [DescriptorType!]
  inputType: String!
  multiInput: Boolean
}

type ObservationType {
  id: ID
  name: String!
  tab: String!
  descriptorsTypes: [DescriptorTypeType!]!
}

type Query {
  getAllStudies: [FraseograficStudyType!]!
  getStudyByID(studyID: String!): FraseograficStudyToEditType!
  getDictionariesInfoByID(studyID: String!): [DictionaryInfotype!]!
  getAllDictionaries: [DictionaryType!]!
  getDictionaryByID(dictionaryID: String!): DictionaryType!
  getEntryByID(entryID: String!): EntryToEditType!
  getEntryUbicationsByID(entryID: String!): [String!]!
  getAllElements: [ElementType!]!
  getUbicationByElementID(elementID: String!): Ubicationtype!
  getAllUbications: [Ubicationtype!]!
  getAllClasifications: [Clasificationtype!]!
  getAllAuthors: [Authortype!]!
  getAuthorById(id: String!): AuthorToEditType!
  getAllDictionaryInfo: [DictionaryInfotype!]!
  getDictionaryInfoById(id: String!): DictionaryInfotype!
  getAllDescriptors: [DescriptorType!]!
  getDescriptorByDescription(description: String!): DescriptorType!
  getAllDescriptorsTypes: [DescriptorTypeType!]!
  getDescriptorsTypesByTab(tab: String!): [DescriptorTypeType!]!
  getObservationsByTab(tab: String!): [ObservationType!]!
}

type Mutation {
  createStudy(fraseograficStudy: NewfraseograficStudyType!): FraseograficStudyType!
  deleteStudyByID(studyID: String!): Boolean!
  editStudy(newStudy: EditedfraseograficStudyType!): FraseograficStudyType!
  createEntryByDictionaryID(dictionaryID: String!, newEntry: NewEntryType!): EntryType!
  deleteEntryByDictionaryID(dictionaryID: String!, entryID: String!): Boolean!
  editEntry(entry: EditedEntryType!): EntryType!
  createElement(newElement: NewElementType!): ElementType!
  createUbication(newUbication: NewUbicationtype!): Ubicationtype!
  createClasification(newClasification: NewClasificationtype!): Clasificationtype!
  createAuthor(newAuthor: NewAuthortype!): Authortype!
  editAuthor(editedAuthor: EditedAuthorType!): Authortype!
  createDictionaryInfo(newDictionaryInfo: NewDictionaryInfotype!): DictionaryInfotype!
  editDictionaryInfo(editedDictionaryInfo: EditedDictionaryInfotype!): DictionaryInfotype!
  createDescriptorType(newDescriptorType: NewDescriptorTypeType!): DescriptorTypeType!
  createDescriptorByDescriptorType(descriptor: NewDescriptorType!, descriptorTypeID: String!): DescriptorType!
  createObservation(newObservationType: NewObservationType!): ObservationType!
}

input NewfraseograficStudyType {
  name: String!
  initYear: Float!
  finalYear: Float!
  state: String
  dictionaries: [NewDictionaryType!]
}

input NewDictionaryType {
  dictionaryInfo: String!
  letters: [String!]!
  entries: [String!]
}

input EditedfraseograficStudyType {
  id: ID!
  name: String!
  initYear: Float!
  finalYear: Float!
  state: String
  dictionaries: [EditedDictionaryType!]
}

input EditedDictionaryType {
  id: ID
  dictionaryInfo: String!
  letters: [String!]!
  entries: [String!]
}

input NewEntryType {
  letter: String!
  context: [String!]!
  elements: [NewElementType!]
}

input NewElementType {
  element: String!
  clasification: String!
  ubication: String!
  generalDescription: GeneralDescriptionInputType
  orderLemma: OrderLemmaInputType
  useInformation: [UseInformationInputType!]
  contornoDefinition: [ContornoDefinitionInputType!]
  example: ExampleInputType
  paradigmaticInfo: ParadigmaticInfoInputType
}

input GeneralDescriptionInputType {
  tipo: String
  structure: String
  conceptualDomain: String
}

input OrderLemmaInputType {
  order: [String!]
  criteriaOfLematization: [String!]
  formalStructure: [String!]
  ubicationOfContorno: String
  typeOfVariant: [String!]
  formatOfVariant: [String!]
  tipographyOfVariant: [String!]
}

input UseInformationInputType {
  anotation: String
  position: String
  format: String
  tipography: String
}

input ContornoDefinitionInputType {
  definition: String
  typeOfDefinition: String
  argumentalSchema: String
  relationship: [String!]
  contorno: String
  typeOfContorno: [String!]
  positionOfContorno: [String!]
  formatOfContorno: [String!]
}

input ExampleInputType {
  anotation: String
  typeOfExample: [String!]
  formatOfExample: [String!]
  functionOfExample: [String!]
}

input ParadigmaticInfoInputType {
  typeOfRelationship: String
  formOfPresentation: [String!]
  position: [String!]
}

input EditedEntryType {
  id: ID!
  letter: String!
  context: [String!]!
  elements: [EditedElementType!]
}

input EditedElementType {
  id: ID
  element: String!
  clasification: String!
  ubication: String!
  generalDescription: EditedGeneralDescriptionType
  orderLemma: EditedOrderLemmaType
  useInformation: [EditedUseInformationType!]
  contornoDefinition: [EditedContornoDefinitionType!]
  example: EditedExampleType
  paradigmaticInfo: EditedParadigmaticInfoType
}

input EditedGeneralDescriptionType {
  tipo: String
  structure: String
  conceptualDomain: String
}

input EditedOrderLemmaType {
  order: [String!]
  criteriaOfLematization: [String!]
  formalStructure: [String!]
  ubicationOfContorno: String
  typeOfVariant: [String!]
  formatOfVariant: [String!]
  tipographyOfVariant: [String!]
}

input EditedUseInformationType {
  anotation: String
  position: String
  format: String
  tipography: String
}

input EditedContornoDefinitionType {
  definition: String!
  typeOfDefinition: String!
  argumentalSchema: String!
  relationship: [String!]
  contorno: String!
  typeOfContorno: [String!]
  positionOfContorno: [String!]
  formatOfContorno: [String!]
}

input EditedExampleType {
  anotation: String
  typeOfExample: [String!]
  formatOfExample: [String!]
  functionOfExample: [String!]
}

input EditedParadigmaticInfoType {
  typeOfRelationship: String
  formOfPresentation: [String!]
  position: [String!]
}

input NewUbicationtype {
  ubication: String!
}

input NewClasificationtype {
  clasification: String!
}

input NewAuthortype {
  name: String!
  siglas: String!
}

input EditedAuthorType {
  id: ID
  name: String!
  siglas: String!
}

input NewDictionaryInfotype {
  name: String!
  siglas: String!
  author: [String!]!
  annoOfPublication: Float!
  reference: String!
}

input EditedDictionaryInfotype {
  id: ID
  name: String!
  siglas: String!
  author: [String!]!
  annoOfPublication: Float!
  reference: String!
}

input NewDescriptorTypeType {
  name: String!
  tab: String
  descriptors: [NewDescriptorType!]
  inputType: String!
  multiInput: Boolean
}

input NewDescriptorType {
  description: String!
}

input NewObservationType {
  name: String!
  tab: String!
  descriptorsTypes: [NewDescriptorTypeType!]!
}
