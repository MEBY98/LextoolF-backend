# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type DescriptorType {
  id: ID
  description: String
}

type Clasificationtype {
  id: ID!
  clasification: String!
}

type Ubicationtype {
  id: ID!
  ubication: String!
  clasifications: [Clasificationtype!]!
}

type DescriptorsDefinitionObjectType {
  typeOfDefinition: DescriptorType
  argumentalSchema: DescriptorType
  relationship: [DescriptorType!]
}

type DescriptorsDefinitionToEditType {
  typeOfDefinition: String
  argumentalSchema: String
  relationship: [String!]
}

type DefinitionObjectType {
  definition: String!
  descriptors: DescriptorsDefinitionObjectType!
}

type DefinitionToEditType {
  definition: String
  descriptors: DescriptorsDefinitionToEditType
}

type DescriptorsContornoObjectType {
  typeOfContorno: [DescriptorType!]
  positionOfContorno: [DescriptorType!]
  formatOfContorno: [DescriptorType!]
}

type DescriptorsContornoToEditType {
  typeOfContorno: [String!]
  positionOfContorno: [String!]
  formatOfContorno: [String!]
}

type ContornoObjectType {
  contorno: String!
  descriptors: DescriptorsContornoObjectType!
}

type ContornoToEditType {
  contorno: String
  descriptors: DescriptorsContornoToEditType
}

type ContornoDefinitionObjectType {
  definition: DefinitionObjectType!
  contorno: ContornoObjectType!
}

type ContornoDefinitionToEditType {
  definition: DefinitionToEditType
  contorno: ContornoToEditType
}

type ExampleObjectType {
  anotation: String
  typeOfExample: [DescriptorType!]
  formatOfExample: [DescriptorType!]
  functionOfExample: [DescriptorType!]
}

type ExampleToEditType {
  anotation: String
  typeOfExample: [String!]
  formatOfExample: [String!]
  functionOfExample: [String!]
}

type UseInformationDescriptorsObjectType {
  position: DescriptorType
  format: DescriptorType
  tipography: DescriptorType
}

type UseInformationDescriptorsToEditType {
  position: String
  format: String
  tipography: String
}

type UseInformationObjectType {
  anotation: String
  descriptors: UseInformationDescriptorsObjectType
}

type UseInformationToEditType {
  anotation: String
  descriptors: UseInformationDescriptorsToEditType
}

type GeneralDescriptionObjectType {
  type: DescriptorType
  structure: DescriptorType
  conceptualDomain: DescriptorType
}

type GeneralDescriptorToEditType {
  type: String
  structure: String
  conceptualDomain: String
}

type OrderLemmaObjectType {
  order: [DescriptorType!]
  criteriaOfLematization: [DescriptorType!]
  formalStructure: [DescriptorType!]
  ubicationOfContorno: DescriptorType
  typeOfVariant: [DescriptorType!]
  formatOfVariant: [DescriptorType!]
  tipographyOfVariant: [DescriptorType!]
}

type OrderLemmaToEditType {
  order: [String!]
  criteriaOfLematization: [String!]
  formalStructure: [String!]
  ubicationOfContorno: String
  typeOfVariant: [String!]
  formatOfVariant: [String!]
  tipographyOfVariant: [String!]
}

type ParadigmaticInfoObjectType {
  typeOfRelationship: DescriptorType
  formOfPresentation: [DescriptorType!]
  position: [DescriptorType!]
}

type ParadigmaticInfoToEditType {
  typeOfRelationship: String
  formOfPresentation: [String!]
  position: [String!]
}

type UFtype {
  id: ID!
  UF: String!
  ubication: Ubicationtype!
  generalDescription: GeneralDescriptionObjectType
  useInformation: [UseInformationObjectType!]
  orderLemma: OrderLemmaObjectType
  ContornoDefinition: [ContornoDefinitionObjectType!]
  example: ExampleObjectType
  paradigmaticInfo: ParadigmaticInfoObjectType
}

type UFToEditType {
  id: ID!
  UF: String!
  ubication: String!
  generalDescription: GeneralDescriptorToEditType
  useInformation: [UseInformationToEditType!]
  orderLemma: OrderLemmaToEditType
  ContornoDefinition: [ContornoDefinitionToEditType!]
  example: ExampleToEditType
  paradigmaticInfo: ParadigmaticInfoToEditType
}

type Sublemmatype {
  id: ID!
  sublemma: String!
  clasification: Clasificationtype!
}

type SublemmaToEdittype {
  id: ID!
  sublemma: String!
  clasification: String!
}

type Lemmatype {
  id: ID!
  lemma: String!
  clasification: Clasificationtype!
}

type LemmaToEditType {
  id: ID!
  lemma: String!
  clasification: String!
}

type EntryType {
  id: ID!
  letter: String!
  context: [String!]!
  lemma: Lemmatype
  sublemmas: [Sublemmatype!]!
  UFs: [UFtype!]!
}

type EntryToEditType {
  id: ID!
  letter: String!
  context: [String!]!
  lemma: LemmaToEditType
  sublemmas: [SublemmaToEdittype!]
  UFs: [UFToEditType!]!
}

type AuthorType {
  name: String!
  siglas: String!
}

type DictionaryType {
  id: ID!
  name: String!
  shortName: String!
  author: [AuthorType!]!
  annoOfPublication: Float!
  reference: String!
  letters: [String!]!
  entries: [EntryType!]!
}

type EditDictionaryObjectType {
  id: ID
  name: String!
  shortName: String!
  author: [AuthorType!]!
  annoOfPublication: Float!
  reference: String!
  letters: [String!]!
  entries: [String!]
}

type FraseograficStudyType {
  id: ID!
  name: String!
  period: String!
  state: String!
  dictionaries: [DictionaryType!]!
}

type EditfraseograficStudyObjectType {
  id: ID!
  name: String!
  period: String!
  state: String!
  dictionaries: [EditDictionaryObjectType!]!
}

type DescriptorTypeType {
  id: ID!
  name: String!
  tab: String
  descriptors: [DescriptorType!]!
  inputType: String!
  multiInput: Boolean!
}

type ObservationType {
  id: ID!
  name: String!
  tab: String!
  descriptorsTypes: [DescriptorTypeType!]!
}

type Query {
  getAllStudies: [FraseograficStudyType!]!
  getStudyByID(studyID: String!): EditfraseograficStudyObjectType!
  getAllDictionaries: [DictionaryType!]!
  getDictionaryByID(dictionaryID: String!): DictionaryType!
  getAllEntries: [EntryType!]!
  getEntryByID(entryID: String!): EntryToEditType!
  getEntryUbicationsByID(entryID: String!): [String!]!
  getAllDescriptors: [DescriptorType!]!
  getAllUFs: [UFtype!]!
  getAllUbications: [Ubicationtype!]!
  getAllLemmaClasifications: [Clasificationtype!]!
  getAllSublemmaClasifications: [Clasificationtype!]!
  getAllClasifications: [Clasificationtype!]!
  getAllDescriptorsTypes: [DescriptorTypeType!]!
  getAllGeneralDescriptionDescriptorsTypes: [DescriptorTypeType!]!
  getAllDefinitionDescriptorsTypes: [DescriptorTypeType!]!
  getAllContornoDescriptorsTypes: [DescriptorTypeType!]!
  getAllExampleDescriptorsTypes: [DescriptorTypeType!]!
  getAllParadigmaticInfoDescriptorsTypes: [DescriptorTypeType!]!
  getAllUseInformationObservations: [ObservationType!]!
  getAllOrderLemmaObservations: [ObservationType!]!
}

type Mutation {
  createStudy(fraseograficStudy: NewfraseograficStudyType!): FraseograficStudyType!
  deleteStudyByID(studyID: String!): FraseograficStudyType!
  createDictionaryByStudyID(studyID: String!, newDictionary: NewDictionaryType!): EditDictionaryObjectType!
  editStudy(newStudy: EditfraseograficStudyType!): FraseograficStudyType!
  createEntryByDictionaryID(dictionaryID: String!, newEntry: NewEntryType!): EntryType!
  deleteEntryByDictionaryID(dictionaryID: String!, entryID: String!): Boolean!
  createEntry(entry: NewEntryType!): [EntryType!]!
  editEntry(entry: EditedEntryType!): EntryType!
  createUF(newUF: NewUFtype!): UFtype!
  createUbication(newUbication: NewUbicationtype!): Ubicationtype!
  createClasification(newClasification: NewClasificationtype!): Clasificationtype!
  createDescriptorType(newDescriptorType: NewDescriptorTypeType!): DescriptorTypeType!
  createDescriptorByDescriptorType(descriptor: NewDescriptorType!, descriptorTypeID: String!): DescriptorType!
  createObservation(newObservationType: NewObservationType!): ObservationType!
}

input NewfraseograficStudyType {
  name: String!
  period: String!
  state: String
  dictionaries: [NewDictionaryType!]
}

input NewDictionaryType {
  name: String!
  shortName: String!
  author: [NewAuthorType!]!
  annoOfPublication: Float!
  reference: String!
  letters: [String!]!
  entries: [String!]
}

input NewAuthorType {
  name: String!
  siglas: String!
}

input EditfraseograficStudyType {
  id: ID!
  name: String!
  period: String!
  state: String
  dictionaries: [EditDictionaryInputType!]
}

input EditDictionaryInputType {
  id: ID
  name: String!
  shortName: String!
  author: [NewAuthorType!]!
  annoOfPublication: Float!
  reference: String!
  letters: [String!]!
  entries: [String!]
}

input NewEntryType {
  letter: String!
  context: [String!]!
  lemma: NewLemmatype
  sublemmas: [NewSublemmatype!]!
  UFs: [NewUFtype!]!
}

input NewLemmatype {
  lemma: String!
  clasification: String!
}

input NewSublemmatype {
  sublemma: String!
  clasification: String!
}

input NewUFtype {
  UF: String!
  ubication: String!
  generalDescription: GeneralDescriptorInputType
  useInformation: [UseInformationInputType!]
  orderLemma: OrderLemmaInputType
  ContornoDefinition: [ContornoDefinitionInputType!]
  example: ExampleInputType
  paradigmaticInfo: ParadigmaticInfoInputType
}

input GeneralDescriptorInputType {
  type: String
  structure: String
  conceptualDomain: String
}

input UseInformationInputType {
  anotation: String
  descriptors: UseInformationDescriptorsInputType
}

input UseInformationDescriptorsInputType {
  position: String
  format: String
  tipography: String
}

input OrderLemmaInputType {
  order: [String!]
  criteriaOfLematization: [String!]
  formalStructure: [String!]
  ubicationOfContorno: String
  typeOfVariant: [String!]
  formatOfVariant: [String!]
  tipographyOfVariant: [String!]
}

input ContornoDefinitionInputType {
  definition: DefinitionInputType
  contorno: ContornoInputType
}

input DefinitionInputType {
  definition: String
  descriptors: DescriptorsDefinitionInputType
}

input DescriptorsDefinitionInputType {
  typeOfDefinition: String
  argumentalSchema: String
  relationship: [String!]
}

input ContornoInputType {
  contorno: String
  descriptors: DescriptorsContornoInputType
}

input DescriptorsContornoInputType {
  typeOfContorno: [String!]
  positionOfContorno: [String!]
  formatOfContorno: [String!]
}

input ExampleInputType {
  anotation: String
  typeOfExample: [String!]
  formatOfExample: [String!]
  functionOfExample: [String!]
}

input ParadigmaticInfoInputType {
  typeOfRelationship: String
  formOfPresentation: [String!]
  position: [String!]
}

input EditedEntryType {
  id: ID!
  letter: String!
  context: [String!]!
  lemma: EditedLemmaType
  sublemmas: [EditedSublemmaType!]
  UFs: [EditedUFType!]!
}

input EditedLemmaType {
  id: ID
  lemma: String!
  clasification: String!
}

input EditedSublemmaType {
  id: ID
  sublemma: String!
  clasification: String!
}

input EditedUFType {
  id: ID
  UF: String!
  ubication: String!
  generalDescription: EditedGeneralDescriptorType
  useInformation: [EditedUseInformationType!]
  orderLemma: EditedOrderLemmaType
  ContornoDefinition: [EditedContornoDefinitionType!]
  example: EditedExampleType
  paradigmaticInfo: EditedParadigmaticInfoType
}

input EditedGeneralDescriptorType {
  type: String
  structure: String
  conceptualDomain: String
}

input EditedUseInformationType {
  anotation: String
  descriptors: EditedUseInformationDescriptorsType
}

input EditedUseInformationDescriptorsType {
  position: String
  format: String
  tipography: String
}

input EditedOrderLemmaType {
  order: [String!]
  criteriaOfLematization: [String!]
  formalStructure: [String!]
  ubicationOfContorno: String
  typeOfVariant: [String!]
  formatOfVariant: [String!]
  tipographyOfVariant: [String!]
}

input EditedContornoDefinitionType {
  definition: EditedDefinitionType
  contorno: EditedContornoType
}

input EditedDefinitionType {
  definition: String
  descriptors: EditedDescriptorsDefinitionType
}

input EditedDescriptorsDefinitionType {
  typeOfDefinition: String
  argumentalSchema: String
  relationship: [String!]
}

input EditedContornoType {
  contorno: String
  descriptors: EditedDescriptorsContornoType
}

input EditedDescriptorsContornoType {
  typeOfContorno: [String!]
  positionOfContorno: [String!]
  formatOfContorno: [String!]
}

input EditedExampleType {
  anotation: String
  typeOfExample: [String!]
  formatOfExample: [String!]
  functionOfExample: [String!]
}

input EditedParadigmaticInfoType {
  typeOfRelationship: String
  formOfPresentation: [String!]
  position: [String!]
}

input NewUbicationtype {
  ubication: String!
  clasifications: [String!]!
}

input NewClasificationtype {
  clasification: String!
}

input NewDescriptorTypeType {
  name: String!
  tab: String
  descriptors: [NewDescriptorType!]
  inputType: String!
  multiInput: Boolean
}

input NewDescriptorType {
  description: String!
}

input NewObservationType {
  name: String!
  tab: String!
  descriptorsTypes: [NewDescriptorTypeType!]!
}
